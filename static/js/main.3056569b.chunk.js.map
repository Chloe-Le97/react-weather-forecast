{"version":3,"sources":["weather.components/weather.component.jsx","weather.components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","weatherIcon","style","fontSize","temperature","description","Form","value","input","type","placeholder","name","onChange","handleChange","onClick","loadWeather","error","App","e","setState","target","getWeather","a","preventDefault","state","fetch","api_call","console","log","ok","status","alert","Error","json","data","sys","Math","floor","main","temp","weather","getWeatherIcon","id","message","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3056569b.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './weather.style.css';\r\n\r\nconst Weather = (props) => {\r\n    return(\r\n        <div className='weather'>\r\n            <h1 className='title'>{props.city}, {props.country}</h1>\r\n            <div className='icon'>\r\n                <i className={`wi ${props.weatherIcon}`} style={{fontSize:45}}></i>\r\n            </div>\r\n            <div className='temperature'>{props.temperature}Â°C</div> \r\n            <div className='description'>{props.description}</div>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css'\r\n\r\nconst Form = (props)=>{\r\n return (\r\n     <div>  \r\n         <form>\r\n            <input value={props.input} type='text' className='input' placeholder=\"Type the city\" name='city'onChange={props.handleChange}></input>\r\n            <button type='button' onClick={props.loadWeather} className='btn'>Get weather</button>\r\n         </form>\r\n         <div className='error'>{props.error?error():null}</div>\r\n     </div>\r\n )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div>Please Enter Valid City</div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './weather.components/weather.component';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './weather.components/form.component';\n\n\nconst key = \"b3fef79d1e7662cdb8177624751f17f3\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      input:'',\n      city:'City',\n      country:'Country',\n      icon:'',\n      temperature:'--',\n      description:'',\n      error:false,\n    }\n    \n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\n  getWeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeID>=300 && rangeID<=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID>=500 && rangeID<=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;  \n      case rangeID>=600 && rangeID<=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;   \n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeID>=801 && rangeID<=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;    \n    }\n  }\n\n  handleChange= e =>{\n    this.setState({\n      input:e.target.value\n    })\n  }\n\n  getWeather = async(e) =>{\n\n    e.preventDefault();\n    \n    const city = this.state.input;\n    \n    if(city){\n    try{const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`)\n    console.log(api_call);\n    if (!api_call.ok){\n      if (api_call.status>=500&&api_call.status<=599)\n        alert('Server error');\n      else if (api_call.status>=400&&api_call.status<=499) {\n        alert('City Not Found');\n      }\n      throw new Error(api_call.status);\n    }\n    const data = await api_call.json();\n      \n    console.log(data);\n      \n    this.setState({\n      input:'',\n      city: data.name,\n      country:data.sys.country,\n      temperature:Math.floor(data.main.temp-273),\n      description: data.weather[0].description,\n      error:false,\n    })\n    this.getWeatherIcon(this.weatherIcon,data.weather[0].id);}\n\n    catch(error){\n      console.log(error.message);\n      this.setState({\n        input:'',\n        city:'City',\n        country:'Country',\n        icon:'',\n        temperature:'--',\n        description:'',\n        error:true})\n    }\n    }\n    else{\n      this.setState({\n        error: true\n      })\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <div className='container'>\n        <Form \n          input={this.state.input} \n          handleChange={this.handleChange} \n          loadWeather={this.getWeather}\n          error={this.state.error}/>  \n        <Weather \n          city={this.state.city} \n          country={this.state.country} \n          temperature={this.state.temperature} \n          description={this.state.description}\n          weatherIcon={this.state.icon}/>\n          </div>\n    </div>\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}