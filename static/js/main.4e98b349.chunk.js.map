{"version":3,"sources":["weather.components/weather.component.jsx","weather.components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","weatherIcon","style","fontSize","temperature","description","Form","onSubmit","loadWeather","value","input","type","placeholder","name","onChange","handleChange","onClick","getCurrentWeather","error","key","App","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","alert","lat","long","a","fetch","api_call","json","data","console","log","setState","sys","Math","floor","main","temp","weather","getWeatherIcon","id","message","icon","e","preventDefault","keyCode","target","getWeather","state","ok","status","Error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","this","icons","rangeID","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4e98b349.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.style.css\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"weather\">\r\n      <h1 className=\"title\">\r\n        {props.city}, {props.country}\r\n      </h1>\r\n      <div className=\"icon\">\r\n        <i className={`wi ${props.weatherIcon}`} style={{ fontSize: 45 }}></i>\r\n      </div>\r\n      <div className=\"temperature\">{props.temperature}Â°C</div>\r\n      <div className=\"description\">{props.description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      <h3>Weather Forecast</h3>\r\n      <form onSubmit={props.loadWeather} className=\"form\">\r\n        <input\r\n          value={props.input}\r\n          type=\"text\"\r\n          className=\"input\"\r\n          placeholder=\"Type the city\"\r\n          name=\"city\"\r\n          onChange={props.handleChange}\r\n        ></input>\r\n        <button type=\"submit\" className=\"btn1\">\r\n          Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn2\"\r\n          onClick={props.getCurrentWeather}\r\n        >\r\n          Current Position\r\n        </button>\r\n      </form>\r\n      <div className=\"error\">{props.error ? error() : null}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return <div>Please Enter Valid City</div>;\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./weather.components/weather.component\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./weather.components/form.component\";\n\nconst key = \"b3fef79d1e7662cdb8177624751f17f3\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      city: \"City\",\n      country: \"Country\",\n      icon: \"\",\n      temperature: \"--\",\n      description: \"\",\n      error: false,\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n\n  componentDidMount() {\n    this.getCurrentWeather();\n  }\n\n  getCurrentWeather = () => {\n    const success = (position) => {\n      this.getWeatherData(position.coords.latitude, position.coords.longitude);\n    };\n\n    const error = () => {\n      alert(\"Unable to retrieve location.\");\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      alert(\n        \"Your browser does not support location tracking, or permission is denied.\"\n      );\n    }\n  };\n\n  getWeatherData = async (lat, long) => {\n    if (lat & long) {\n      try {\n        const api_call = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${key}`\n        );\n        const data = await api_call.json();\n\n        console.log(data);\n\n        this.setState({\n          input: \"\",\n          city: data.name,\n          country: data.sys.country,\n          temperature: Math.floor(data.main.temp - 273),\n          description: data.weather[0].description,\n          error: false,\n        });\n        this.getWeatherIcon(this.weatherIcon, data.weather[0].id);\n      } catch (error) {\n        console.log(error.message);\n        this.setState({\n          input: \"\",\n          city: \"City\",\n          country: \"Country\",\n          icon: \"\",\n          temperature: \"--\",\n          description: \"\",\n          error: true,\n        });\n      }\n    } else {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  getWeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n    }\n  }\n\n  handleChange = (e) => {\n    e.preventDefault();\n    if (e.keyCode === 13) {\n      console.log(\"enter\");\n    } else {\n      this.setState({\n        input: e.target.value,\n      });\n    }\n  };\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = this.state.input;\n\n    if (city) {\n      try {\n        const api_call = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`\n        );\n        console.log(api_call);\n        if (!api_call.ok) {\n          if (api_call.status >= 500 && api_call.status <= 599)\n            alert(\"Server error\");\n          else if (api_call.status >= 400 && api_call.status <= 499) {\n            alert(\"City Not Found\");\n          }\n          throw new Error(api_call.status);\n        }\n        const data = await api_call.json();\n\n        console.log(data);\n\n        this.setState({\n          input: \"\",\n          city: data.name,\n          country: data.sys.country,\n          temperature: Math.floor(data.main.temp - 273),\n          description: data.weather[0].description,\n          error: false,\n        });\n        this.getWeatherIcon(this.weatherIcon, data.weather[0].id);\n      } catch (error) {\n        console.log(error.message);\n        this.setState({\n          input: \"\",\n          city: \"City\",\n          country: \"Country\",\n          icon: \"\",\n          temperature: \"--\",\n          description: \"\",\n          error: true,\n        });\n      }\n    } else {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Weather Forecast</h1>\n        <div className=\"container\">\n          <Form\n            input={this.state.input}\n            handleChange={this.handleChange}\n            loadWeather={this.getWeather}\n            error={this.state.error}\n            getCurrentWeather={this.getCurrentWeather}\n          />\n          <Weather\n            city={this.state.city}\n            country={this.state.country}\n            temperature={this.state.temperature}\n            description={this.state.description}\n            weatherIcon={this.state.icon}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}